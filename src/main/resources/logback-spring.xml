<?xml version="1.0" encoding="UTF-8" ?>
<configuration>

	<!-- 초기화 로그 확인을 위한 설정 -->
<!--     <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener" /> -->

	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
<!--             <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %5level %logger - %msg%n</pattern> -->
            <pattern>%green(%d{yyyy-MM-dd HH:mm:ss.SSS}) %magenta([%thread]) %clr %5level %cyan(%logger) - %msg%n</pattern>
        </encoder>
    </appender>
    
    
    
   	<!-- log4jdbc 옵션 설정 -->
	<logger name="jdbc" level="OFF" /> 					<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.connection" level="OFF" /> 		<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="DEBUG" /> 			<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.resultsettable" level="INFO" /> 	<!-- SQL 결과 테이블 표출 -->
	<logger name="jdbc.sqltiming" level="OFF" /> 		<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
	<logger name="jdbc.audit" level="OFF" /> 			<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF" />		<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
    
    
    <!--  hibernate 옵션 설정(jpa) -->
	<logger name="org.hibernate" level="OFF" />
    
    <!-- hikari(dataSource) 옵션 설정 -->
    <logger name="com.zaxxer.hikari.pool.PoolBase" level="ERROR"/>
    <logger name="com.zaxxer.hikari.pool.HikariPool" level="ERROR"/>
    <logger name="com.zaxxer.hikari.HikariDataSource" level="ERROR"/>
    
    <root level="INFO">
<!--         <appender-ref ref="CONSOLE" /> -->
    	<appender-ref ref="STDOUT" />
    </root>
</configuration>